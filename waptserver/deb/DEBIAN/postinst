#!/usr/bin/python

import subprocess
import os
import shutil
import sys
import ConfigParser
import time


def run(*args, **kwargs):
    return subprocess.check_output(*args, shell=True, **kwargs)




run('systemctl enable  waptserver')


print("Setting up pid and log files")
run('touch /var/log/waptserver.log')
run('touch /var/run/waptserver.pid')
run('chown wapt:root /var/log/waptserver.log')
run('chmod 640 /var/log/waptserver.log')

print("Cleaning up leftovers")
for cleanup_dir in ('rpm','mongodb','spool','uninstall_service.bat'):
    mypath = os.path.join('/opt/wapt/waptserver',cleanup_dir)
    if os.path.exists(mypath):
        shutil.rmtree(mypath)

def cleanup_ini_file(waptserverini_path):
    if not os.path.exists(waptserverini_path):
        return

    try:
        cfg = ConfigParser.RawConfigParser()
        cfg.read(waptserverini_path)
        if cfg.has_setion('uwsgi'):
            print('removing uwsgi section from conf file')
            cfg.remove_section('uwsgi')
        with open(waptserverini_path, 'wb') as out:
            cfg.write(out)
    except Exception:
        import traceback
        print("Error when amending" + waptserverini_path)
        traceback.print_exc()
        exit(0)




# relocating waptserver.ini config file to the new location
OLD_CFG_PATH = '/opt/wapt/waptserver/waptserver.ini'
NEW_CFG_PATH = '/opt/wapt/conf/waptserver.ini'
if os.path.exists(OLD_CFG_PATH) and not os.path.islink(OLD_CFG_PATH):
    try:
        print('relocating waptserver.ini conf file to /opt/wapt/con/waptserver.ini')
        os.rename(OLD_CFG_PATH, NEW_CFG_PATH)
        os.symlink(NEW_CFG_PATH, OLD_CFG_PATH)
    except Exception:
        pass

# removing old properties from ini file
# this has been moved to postconf.py
#cleanup_ini_file(NEW_CFG_PATH) 


print("Tightening up permissions")
run('find /opt/wapt -type f -exec chmod 644 {} +')
run('find /opt/wapt -type f ! -name waptserver.ini -exec chown root:root {} +')
run('find /opt/wapt -type d ! -name conf ! -name log -exec chmod 755 {} +')
run('find /opt/wapt -type d ! -name conf ! -name log -exec chown root:root {} +')
run('chown -R wapt:root /opt/wapt/conf')
run('chmod 750 /opt/wapt/conf')
run('chown -R wapt:root /opt/wapt/log')
run('chmod 755 /opt/wapt/log')
run('chmod 755 /opt/wapt/waptserver/scripts/postconf.py')
run('mkdir -p /var/www/wapt/icons')
run('mkdir -p /var/www/wapt-host')
run('mkdir -p /var/www/wapt-hostref')

# fix ownership bug of /var/www, need to find where it is screwed up
run('chown www-data:www-data /var/www')
run('chmod 755 /var/www')

run('chown -R wapt:www-data /var/www/wapt*')
run('chmod -R 750 /var/www/wapt*')
run("""echo "User-agent:*\nDisallow: /\n" > /var/www/robots.txt""")

os.chmod('/opt/wapt/wapt-scanpackages.py',0o755)
os.chmod('/opt/wapt/wapt-signpackages.py',0o755)



print("Restarting rsyslog")
run('systemctl restart rsyslog')


def check_if_running(process_name):
    try:
        run('pgrep -f "%s" ' % process_name)
      
        return True
    except Exception:
        return False


# restart server if conf file is there and if it was already running
if os.path.exists('/opt/wapt/conf/waptserver.ini'):
    if check_if_running('waptserver'):
        print("Restarting server")
        run('service waptserver stop')
        time.sleep(2)
        # XXX temporary: clean up leftover waptserver processes
        # due to broken /etc/init.d/waptserver script
        try:
            run("pkill -INT -f '^/usr/bin/uwsgi-core.*wapt'")
        except subprocess.CalledProcessError as e:
            pass
    run('service waptserver start')
else:
    print(""" '\e[1;31m%-6s\e[m\n' "The installation of waptserver is finished!" """)
    print(""" '\e[1;31m%-6s\e[m\n' "For postconf please run: /usr/bin/python /opt/wapt/waptserver/scripts/postconf.py" """)
